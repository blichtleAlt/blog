<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>medium on blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/medium/</link>
    <description>Recent content in medium on blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Aug 2020 23:17:44 -0400</lastBuildDate>
    
	<atom:link href="https://blichtlealt.github.io/hugo/tags/medium/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Number of Islands</title>
      <link>https://blichtlealt.github.io/hugo/blog/number-of-islands/</link>
      <pubDate>Wed, 12 Aug 2020 23:17:44 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/number-of-islands/</guid>
      <description>TODO: Link
Problem Statement: Examples1: 2: 3: Idea:This question is analogous to the problem of connected components in an undirected graph.
Here I used recursion for a depth first search.
Solution:void dfs(int i, int j, vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid) { // exit if search exhuasted  if(i &amp;lt; 0 || j &amp;lt; 0 || i &amp;gt;= grid.size() || j &amp;gt;= grid[0].</description>
    </item>
    
    <item>
      <title>129. Sum Root to Leaf Numbers</title>
      <link>https://blichtlealt.github.io/hugo/blog/sum-root-to-leaf-numbers/</link>
      <pubDate>Mon, 10 Aug 2020 23:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/sum-root-to-leaf-numbers/</guid>
      <description>https://leetcode.com/problems/sum-root-to-leaf-numbers/
Problem Statement:  Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.
An example is the root-to-leaf path 1-&amp;gt;2-&amp;gt;3 which represents the number 123.
Find the total sum of all root-to-leaf numbers.
Note: A leaf is a node with no children.
Examples  1: Input: [1,2,3] 1 / \ 2 3 Output: 25 Explanation: The root-to-leaf path 1-&amp;gt;2 represents the number 12. The root-to-leaf path 1-&amp;gt;3 represents the number 13.</description>
    </item>
    
    <item>
      <title>814. Binary Tree Pruning</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-pruning/</link>
      <pubDate>Mon, 10 Aug 2020 17:46:40 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-pruning/</guid>
      <description>https://leetcode.com/problems/binary-tree-pruning/
Problem Statement:  We are given the head node root of a binary tree, where additionally every node&#39;s value is either a 0 or a 1. Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)
Examples  1:   2:   3:   Idea:  The idea here is to make a recursive helper function that will tell us if a given subtree contains a zero.</description>
    </item>
    
    <item>
      <title>113. Path Sum II</title>
      <link>https://blichtlealt.github.io/hugo/blog/path-sum-ii/</link>
      <pubDate>Mon, 10 Aug 2020 00:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/path-sum-ii/</guid>
      <description>https://leetcode.com/problems/path-sum-ii/
Problem Statement:  Given a binary tree and a sum, find all root-to-leaf paths where each path&#39;s sum equals the given sum. Note: A leaf is a node with no children.
Example:  Given the below binary tree and sum = 22, 5 / \ 4 8 / / \ 11 13 4 / \ / \ 7 2 5 1 Return:
[ [5,4,11,2], [5,8,4,5] ] Idea:  We can solve this using a recursive depth first search approach.</description>
    </item>
    
  </channel>
</rss>