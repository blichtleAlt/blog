<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>easy on Brendan&#39;s Blog</title>
    <link>https://blichtlealt.github.io/hugo/tags/easy/</link>
    <description>Recent content in easy on Brendan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Aug 2020 23:48:08 -0400</lastBuildDate>
    
	<atom:link href="https://blichtlealt.github.io/hugo/tags/easy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>257. Binary Tree Paths</title>
      <link>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</link>
      <pubDate>Mon, 10 Aug 2020 23:48:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/binary-tree-paths/</guid>
      <description>https://leetcode.com/problems/binary-tree-paths/
Problem Statement:  Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Examples  1: Input: 1 / \ 2 3 \ 5 Output: [&amp;#34;1-&amp;gt;2-&amp;gt;5&amp;#34;, &amp;#34;1-&amp;gt;3&amp;#34;] Explanation: All root-to-leaf paths are: 1-&amp;gt;2-&amp;gt;5, 1-&amp;gt;3 Idea:  The most intuitive way is to use a recursion here. One is going through the tree by considering at each step the node itself and its children.</description>
    </item>
    
    <item>
      <title>235. Lowest Common Ancestor of a Binary Search Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</link>
      <pubDate>Mon, 10 Aug 2020 11:42:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/lowest-common-ancestor-bst/</guid>
      <description>https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/
Problem Statement:  Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Example:  Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]</description>
    </item>
    
    <item>
      <title>100. Same Tree</title>
      <link>https://blichtlealt.github.io/hugo/blog/same-tree/</link>
      <pubDate>Mon, 10 Aug 2020 01:55:08 -0400</pubDate>
      
      <guid>https://blichtlealt.github.io/hugo/blog/same-tree/</guid>
      <description>https://leetcode.com/problems/same-tree/
Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
Idea:Recursively check each node in each tree. If both are null, we&amp;rsquo;ve gone off the end so return true If one is null and the other isn&amp;rsquo;t, there is a difference. If one has a val that isn&amp;rsquo;t equal to the other, there is a difference.</description>
    </item>
    
  </channel>
</rss>